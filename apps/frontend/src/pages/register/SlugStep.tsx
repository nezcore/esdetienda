// Segundo paso del registro: configuraci√≥n de URL de la tienda

import React from 'react'
import { CheckCircle, XCircle, Loader2 } from 'lucide-react'
import { SlugStatus } from './types'
import { validateSlugPattern } from './validationUtils'
import { generateSlugFromBusiness, generateSlugSuggestions } from './SlugGenerator'

interface SlugStepProps {
  businessName: string
  tenantSlug: string
  setTenantSlug: (value: string) => void
  slugStatus: SlugStatus
  generatingSlug: boolean
  slugSuggestions: string[]
  setSlugSuggestions: (suggestions: string[]) => void
  showSlugSuggestions: boolean
  setShowSlugSuggestions: (show: boolean) => void
  loadingSuggestions: boolean
  setLoadingSuggestions: (loading: boolean) => void
  slugAutoGenerated: boolean
  setSlugAutoGenerated: (value: boolean) => void
  setSlugManuallyCleared: (value: boolean) => void
  onSlugChange: (slug: string) => void
}

const SlugStep: React.FC<SlugStepProps> = ({
  businessName,
  tenantSlug,
  setTenantSlug,
  slugStatus,
  generatingSlug,
  slugSuggestions,
  setSlugSuggestions,
  showSlugSuggestions,
  setShowSlugSuggestions,
  loadingSuggestions,
  setLoadingSuggestions,
  slugAutoGenerated,
  setSlugAutoGenerated,
  setSlugManuallyCleared,
  onSlugChange
}) => {
  const isSlugValid = validateSlugPattern(tenantSlug)
  const slugPattern = /^[a-z0-9-]+$/

  const handleGenerateSuggestions = async () => {
    console.log('üîç Clicked Ver opciones - tenantSlug:', tenantSlug)
    console.log('üîç Current slugStatus:', slugStatus)
    
    setLoadingSuggestions(true)
    
    try {
      const suggestions = await generateSlugSuggestions(businessName, slugPattern)
      console.log('‚úÖ Sugerencias obtenidas:', suggestions)
      setSlugSuggestions(suggestions)
      setShowSlugSuggestions(true)
      console.log('‚úÖ Estado actualizado - showSlugSuggestions: true')
    } catch (error) {
      console.error('‚ùå Error generando sugerencias:', error)
      // Mostrar mensaje de error incluso si falla
      setSlugSuggestions([])
      setShowSlugSuggestions(true)
    } finally {
      setLoadingSuggestions(false)
    }
  }

  const handleSuggestionClick = (suggestion: string) => {
    console.log('üéØ CLICK en sugerencia:', suggestion)
    console.log('üéØ Estado antes:', { tenantSlug, slugAutoGenerated })
    
    // ACTUALIZAR EL CAMPO DE TEXTO
    setTenantSlug(suggestion)
    
    // CERRAR LAS SUGERENCIAS
    setShowSlugSuggestions(false)
    
    // MARCAR COMO MANUAL (usuario eligi√≥ activamente)
    setSlugAutoGenerated(false)
    setSlugManuallyCleared(false)
    
    console.log('üéØ Estado despu√©s - slug deber√≠a ser:', suggestion)
  }

  return (
    <div className="space-y-4 w-full max-w-none">
      <div className="text-center">
        <h2 className="text-xl sm:text-lg font-semibold text-gray-900 dark:text-white mb-3 sm:mb-2">
          Direcci√≥n de tu tienda
        </h2>
        <p className="text-base sm:text-sm text-gray-600 dark:text-gray-400">
          Los clientes podr√°n encontrar tu tienda en esta direcci√≥n
        </p>
      </div>

      <div className="space-y-2 w-full">
        <label className="block text-base sm:text-sm font-medium text-gray-800 dark:text-gray-200 mb-2 sm:mb-1">
          URL de tu tienda
        </label>
        <div className="flex items-center">
          <span className="inline-flex items-center px-4 py-3 sm:px-3 sm:py-2 border border-r-0 border-gray-300 dark:border-gray-700 bg-gray-50 dark:bg-gray-800 text-gray-500 dark:text-gray-400 text-base sm:text-sm rounded-l-xl">
            esdetienda.com/str/
          </span>
          <div className="relative flex-1">
            <input
              type="text"
              required
              minLength={4}
              value={tenantSlug}
              onChange={(e) => {
                const value = e.target.value.toLowerCase().replace(/[^a-z0-9-]/g, '')
                setTenantSlug(value)
                onSlugChange(value)
                
                // Solo resetear el flag de borrado si realmente est√° escribiendo algo diferente
                if (value !== generateSlugFromBusiness(businessName)) {
                  console.log('üë§ Usuario escribi√≥ algo diferente - marcando como manual')
                  setSlugManuallyCleared(false)
                }
                setSlugAutoGenerated(false)
              }}
              className={`w-full px-4 py-3 sm:px-3 sm:py-2 pr-12 sm:pr-10 border border-l-0 rounded-r-xl focus:ring-brand-500 focus:border-brand-500 dark:bg-gray-900 dark:text-gray-100 text-base sm:text-sm ${
                !isSlugValid && tenantSlug
                  ? 'border-red-500 focus:border-red-500 focus:ring-red-500'
                  : slugStatus === 'available'
                  ? 'border-emerald-500 focus:border-emerald-500 focus:ring-emerald-500'
                  : slugStatus === 'taken'
                  ? 'border-red-500 focus:border-red-500 focus:ring-red-500'
                  : 'border-gray-300 dark:border-gray-700'
              }`}
              placeholder="mi-tienda"
            />
            <span className="absolute inset-y-0 right-3 flex items-center pointer-events-none">
              {generatingSlug ? (
                <Loader2 className="h-4 w-4 animate-spin text-brand-500" />
              ) : slugStatus === 'checking' ? (
                <div className="animate-spin h-4 w-4 border-2 border-brand-500 border-t-transparent rounded-full"></div>
              ) : slugStatus === 'available' && isSlugValid ? (
                <CheckCircle className="h-5 w-5 text-emerald-500" />
              ) : slugStatus === 'taken' || (!isSlugValid && tenantSlug) ? (
                <XCircle className="h-5 w-5 text-red-500" />
              ) : null}
            </span>
          </div>
        </div>

        {/* Mensajes de estado */}
        {!isSlugValid && tenantSlug && (
          <p className="text-sm text-red-500 dark:text-red-400">
            Solo se permiten letras min√∫sculas, n√∫meros y guiones. M√≠nimo 4 caracteres.
          </p>
        )}
        {slugStatus === 'taken' && (
          <p className="text-sm text-red-500 dark:text-red-400">
            ‚ùå Esta direcci√≥n ya est√° ocupada
          </p>
        )}
        {slugStatus === 'available' && (
          <p className="text-sm text-emerald-500 dark:text-emerald-400">
            ‚úÖ URL disponible
          </p>
        )}

        {/* Estado de generaci√≥n autom√°tica */}
        {generatingSlug && (
          <p className="text-sm text-brand-500 dark:text-brand-400 flex items-center gap-2">
            <Loader2 className="h-4 w-4 animate-spin" />
            Buscando URL disponible para "{businessName}"...
          </p>
        )}
        
        {/* Bot√≥n para generar sugerencias manualmente - SIEMPRE VISIBLE con nombre v√°lido */}
        {businessName.length >= 4 && (
          <div className="flex justify-end">
            <button
              type="button"
              disabled={loadingSuggestions}
              onClick={handleGenerateSuggestions}
              className={`text-xs underline transition-colors ${
                loadingSuggestions
                  ? 'text-gray-400 cursor-not-allowed'
                  : 'text-brand-600 dark:text-brand-400 hover:text-brand-700 dark:hover:text-brand-300'
              }`}
            >
              {loadingSuggestions ? (
                <span className="flex items-center gap-1">
                  <svg className="animate-spin h-3 w-3" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Generando opciones...
                </span>
              ) : (
                'Ver opciones disponibles'
              )}
            </button>
          </div>
        )}

        {/* Mostrar sugerencias generadas manualmente */}
        {showSlugSuggestions && !loadingSuggestions && (
          <div className="mt-3 space-y-2">
            {slugSuggestions.length > 0 ? (
              <>
                <p className="text-sm text-gray-600 dark:text-gray-400 font-medium">
                  üí° Opciones disponibles para "{businessName}":
                </p>
                <div className="flex flex-wrap gap-2">
                  {slugSuggestions.map((suggestion) => (
                    <button
                      key={suggestion}
                      type="button"
                      onClick={() => handleSuggestionClick(suggestion)}
                      className="px-3 py-1.5 text-sm bg-brand-50 hover:bg-brand-100 dark:bg-brand-900/30 dark:hover:bg-brand-900/50 text-brand-700 dark:text-brand-300 rounded-lg border border-brand-200 dark:border-brand-800 transition-all hover:scale-105 cursor-pointer"
                    >
                      {suggestion}
                    </button>
                  ))}
                </div>
                <p className="text-xs text-gray-500">Haz clic en cualquier opci√≥n para usarla</p>
              </>
            ) : (
              <div className="rounded-xl border border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800 px-4 py-3">
                <p className="text-sm text-gray-600 dark:text-gray-400">
                  No se encontraron alternativas disponibles para "{businessName}". 
                  Intenta modificar manualmente el nombre de la tienda.
                </p>
                <button
                  type="button"
                  onClick={() => setShowSlugSuggestions(false)}
                  className="text-xs text-gray-500 hover:text-gray-700 dark:hover:text-gray-300 underline mt-2"
                >
                  Cerrar
                </button>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  )
}

export default SlugStep
