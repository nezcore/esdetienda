// P√°gina principal de registro - Componente coordinador reorganizado

import { useEffect, useState } from 'react'
import { Link, useNavigate, useSearchParams } from 'react-router-dom'
import { ArrowLeft, ArrowRight, RefreshCcw } from 'lucide-react'
import { authApi, type AuthResponse } from '../../lib/api'
import { useAuth } from '../../contexts/AuthContext'
import ThemeToggle from '../../components/ThemeToggle'
import Logo from '../../components/Logo'

// Componentes modularizados
import BasicInfoStep from './BasicInfoStep'
import SlugStep from './SlugStep'
import TermsStep from './TermsStep'
import PlanSelector from './PlanSelector'

// Tipos y utilidades
import { 
  RegisterFormData, 
  FormValidationState, 
  SlugGenerationState, 
  PasswordStrength,
  EmailStatus
} from './types'
import { 
  getDetailedPasswordStrength, 
  validateEmail, 
  validateBusinessName,
  saveToLocalStorage,
  clearLocalStorage
} from './validationUtils'
import { generateAvailableSlug, generateSlugFromBusiness } from './SlugGenerator'

export default function RegisterPage() {
  const navigate = useNavigate()
  const { login, isAuthenticated } = useAuth()
  const [searchParams] = useSearchParams()
  
  // Redirigir si ya est√° autenticado
  if (isAuthenticated) {
    navigate('/panel', { replace: true })
    return null
  }

  // Configuraci√≥n de planes
  const planDetails = {
    esencial: {
      name: 'Plan Starter',
      price: 'RD$0/mes',
      description: 'Perfecto para empezar',
      features: [
        'Cat√°logo simple (hasta 50 productos)',
        'Respuestas r√°pidas b√°sicas',
        'IA texto 2,000 turnos/mes',
        'Audios‚Üítexto 20 min/mes',
        'Panel compartido',
        '1 usuario invitado'
      ]
    },
    basico: {
      name: 'Plan B√°sico',
      price: 'RD$990/mes',
      description: 'Para peque√±os negocios',
      features: [
        'Cat√°logo completo (hasta 200 productos)',
        'Bot personalizable',
        'IA texto 8,000 turnos/mes',
        'IA visi√≥n 200 im√°genes/mes',
        'Audios‚Üítexto 120 min/mes',
        'Analytics b√°sicos',
        '2 usuarios admin',
        'Soporte prioritario'
      ]
    },
    pro: {
      name: 'Plan Pro',
      price: 'RD$1,990/mes',
      description: 'Para hacer crecer tu negocio',
      popular: true,
      features: [
        'Tienda completa (productos ilimitados)',
        'Bot avanzado + FAQs personalizables',
        'IA texto 15,000 turnos/mes',
        'IA visi√≥n 1,000 im√°genes/mes',
        'Audios‚Üítexto 300 min/mes',
        'Analytics avanzados',
        '3 usuarios admin',
        'Subdominio de marca'
      ]
    }
  }

  // Estados principales
  const [loading, setLoading] = useState(false)
  const [showPassword, setShowPassword] = useState(false)
  const [currentStepIndex, setCurrentStepIndex] = useState(() => {
    const saved = localStorage.getItem('register_temp_step')
    return saved ? parseInt(saved, 10) : 0
  })

  // Datos del formulario
  const [formData, setFormData] = useState<RegisterFormData>({
    email: localStorage.getItem('register_temp_email') || '',
    password: '',
    businessName: localStorage.getItem('register_temp_business') || '',
    tenantSlug: localStorage.getItem('register_temp_slug') || '',
    plan: 'esencial'
  })

  // Estados de validaci√≥n
  const [validation, setValidation] = useState<FormValidationState>({
    emailError: '',
    emailTouched: false,
    businessNameTouched: false,
    passwordTouched: false,
    termsTouched: false
  })

  // Estados espec√≠ficos
  const [emailStatus, setEmailStatus] = useState<EmailStatus>('idle')
  const [passwordStrength, setPasswordStrength] = useState<PasswordStrength>({
    score: 0,
    label: 'Muy d√©bil',
    color: 'bg-red-500',
    bgColor: 'bg-red-50 dark:bg-red-900/20',
    textColor: 'text-red-600 dark:text-red-400',
    percentage: 0,
    suggestions: []
  })
  const [acceptTerms, setAcceptTerms] = useState(false)

  // Estados de slug
  const [slugState, setSlugState] = useState<SlugGenerationState>({
    slugStatus: 'idle',
    generatingSlug: false,
    slugSuggestions: [],
    showSlugSuggestions: false,
    loadingSuggestions: false,
    slugAutoGenerated: false,
    slugManuallyCleared: false
  })

  // Configuraci√≥n de plan desde URL
  type PlanKey = keyof typeof planDetails
  const planParam = searchParams.get('plan') as PlanKey | null
  const [selectedPlan, setSelectedPlan] = useState<PlanKey>(planParam && planDetails[planParam] ? planParam : 'esencial')

  // Dominios permitidos
  const allowedDomainList = [
    'gmail.com', 'googlemail.com', 'outlook.com', 'hotmail.com',
    'live.com', 'msn.com', 'yahoo.com', 'icloud.com', 'me.com', 'mac.com'
  ]

  // Validaciones
  const isBusinessNameValid = validateBusinessName(formData.businessName)
  const isEmailValid = validateEmail(formData.email)
  const isPasswordValid = formData.password.length >= 8
  const isSlugValid = formData.tenantSlug.length >= 4 && /^[a-z0-9-]+$/.test(formData.tenantSlug)

  // Estados de pasos
  const steps = ['Informaci√≥n b√°sica', 'URL de tienda', 'T√©rminos', 'Plan']
  
  // Validaci√≥n por pasos
  const getStepValidation = (stepIndex: number): boolean => {
    switch (stepIndex) {
      case 0: // Informaci√≥n b√°sica
        return isBusinessNameValid && isEmailValid && isPasswordValid && !validation.emailError
      case 1: // URL
        return isSlugValid && (slugState.slugStatus === 'available' || !slugState.generatingSlug)
      case 2: // T√©rminos
        return acceptTerms
      case 3: // Plan (siempre v√°lido)
        return true
      default:
        return false
    }
  }

  // Efectos para persistencia
  useEffect(() => {
    saveToLocalStorage({
      currentStepIndex,
      email: formData.email,
      businessName: formData.businessName,
      tenantSlug: formData.tenantSlug
    })
  }, [currentStepIndex, formData.email, formData.businessName, formData.tenantSlug])

  // Validaci√≥n de email en tiempo real
  const handleEmailBlur = async () => {
    if (!isEmailValid) {
      setValidation(prev => ({ ...prev, emailError: 'Email inv√°lido' }))
      return
    }

    const domain = formData.email.split('@')[1]?.toLowerCase()
    if (!allowedDomainList.includes(domain)) {
      setValidation(prev => ({ 
        ...prev, 
        emailError: 'Usa un email de Gmail, Outlook, Yahoo o iCloud' 
      }))
      return
    }

    setEmailStatus('checking')
    try {
      const response = await authApi.checkEmail(formData.email)
      if (!response.available) {
        setValidation(prev => ({ ...prev, emailError: 'Este email ya tiene una cuenta' }))
        setEmailStatus('taken')
      } else {
        setValidation(prev => ({ ...prev, emailError: '' }))
        setEmailStatus('available')
      }
    } catch (error) {
      console.error('Error verificando email:', error)
      setValidation(prev => ({ ...prev, emailError: 'Error al verificar email' }))
      setEmailStatus('idle')
    }
  }

  // Validaci√≥n de contrase√±a
  const handlePasswordChange = (password: string) => {
    setFormData(prev => ({ ...prev, password }))
    setPasswordStrength(getDetailedPasswordStrength(password))
  }

  // Validaci√≥n de slug
  const handleSlugChange = async (slug: string) => {
    if (!slug) {
      setSlugState(prev => ({ ...prev, slugStatus: 'idle' }))
      return
    }

    if (!isSlugValid) {
      setSlugState(prev => ({ ...prev, slugStatus: 'invalid' }))
      return
    }

    setSlugState(prev => ({ ...prev, slugStatus: 'checking' }))
    
    try {
      const response = await authApi.checkSlug(slug)
      setSlugState(prev => ({ 
        ...prev, 
        slugStatus: response.available ? 'available' : 'taken' 
      }))
    } catch (error) {
      console.error('Error verificando slug:', error)
      setSlugState(prev => ({ ...prev, slugStatus: 'idle' }))
    }
  }

  // Generar slug autom√°ticamente cuando cambia el nombre del negocio
  useEffect(() => {
    if (formData.businessName.length >= 4) {
      const generated = generateSlugFromBusiness(formData.businessName)
      if (generated.length >= 4) {
        if (!formData.tenantSlug || !slugState.slugManuallyCleared) {
          if (!slugState.slugAutoGenerated) {
            console.log('‚ú® Primera vez sin slug - buscando uno disponible...')
            setSlugState(prev => ({ ...prev, generatingSlug: true }))
            generateAvailableSlug(formData.businessName).then(availableSlug => {
              if (availableSlug) {
                setFormData(prev => ({ ...prev, tenantSlug: availableSlug }))
                setSlugState(prev => ({ 
                  ...prev, 
                  slugAutoGenerated: true, 
                  generatingSlug: false 
                }))
              } else {
                setSlugState(prev => ({ ...prev, generatingSlug: false }))
              }
            }).catch(() => {
              setSlugState(prev => ({ ...prev, generatingSlug: false }))
            })
          } else if (slugState.slugAutoGenerated && formData.tenantSlug !== generated) {
            console.log('üîÑ Nombre cambi√≥ y slug era auto-generado - buscando nueva URL disponible...')
            setSlugState(prev => ({ ...prev, generatingSlug: true }))
            generateAvailableSlug(formData.businessName).then(availableSlug => {
              if (availableSlug) {
                setFormData(prev => ({ ...prev, tenantSlug: availableSlug }))
                setSlugState(prev => ({ ...prev, generatingSlug: false }))
              } else {
                setSlugState(prev => ({ ...prev, generatingSlug: false }))
              }
            }).catch(() => {
              setSlugState(prev => ({ ...prev, generatingSlug: false }))
            })
          }
        }
      }
    }
  }, [formData.businessName, formData.tenantSlug, slugState.slugManuallyCleared, slugState.slugAutoGenerated])

  // Navegaci√≥n entre pasos
  const nextStep = () => {
    if (currentStepIndex < steps.length - 1) {
      setCurrentStepIndex(prev => prev + 1)
    }
  }

  const prevStep = () => {
    if (currentStepIndex > 0) {
      setCurrentStepIndex(prev => prev - 1)
    }
  }

  // Env√≠o del formulario
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    
    if (!getStepValidation(currentStepIndex)) {
      return
    }

    if (currentStepIndex < steps.length - 1) {
      nextStep()
      return
    }

    // Registro final
    setLoading(true)
    try {
      const response = (await authApi.register({
        email: formData.email,
        password: formData.password,
        businessName: formData.businessName,
        tenantSlug: formData.tenantSlug,
        plan: selectedPlan
      })) as AuthResponse

      if (response.success) {
        clearLocalStorage()
        login(response.token, response.user, response.tenant)
        navigate('/panel', { replace: true })
      }
    } catch (error: any) {
      console.error('Error en registro:', error)
      alert(error.message || 'Error al crear la cuenta')
    } finally {
      setLoading(false)
    }
  }

  // Renderizar paso actual
  const renderCurrentStep = () => {
    switch (currentStepIndex) {
      case 0:
        return (
          <BasicInfoStep
            businessName={formData.businessName}
            setBusinessName={(value) => setFormData(prev => ({ ...prev, businessName: value }))}
            businessNameTouched={validation.businessNameTouched}
            setBusinessNameTouched={(value) => setValidation(prev => ({ ...prev, businessNameTouched: value }))}
            email={formData.email}
            setEmail={(value) => setFormData(prev => ({ ...prev, email: value }))}
            emailTouched={validation.emailTouched}
            setEmailTouched={(value) => setValidation(prev => ({ ...prev, emailTouched: value }))}
            emailError={validation.emailError}
            emailStatus={emailStatus}
            password={formData.password}
            setPassword={(value) => setFormData(prev => ({ ...prev, password: value }))}
            showPassword={showPassword}
            setShowPassword={setShowPassword}
            passwordTouched={validation.passwordTouched}
            setPasswordTouched={(value) => setValidation(prev => ({ ...prev, passwordTouched: value }))}
            passwordStrength={passwordStrength}
            onEmailBlur={handleEmailBlur}
            onPasswordChange={handlePasswordChange}
            slugAutoGenerated={slugState.slugAutoGenerated}
            setSlugManuallyCleared={(value) => setSlugState(prev => ({ ...prev, slugManuallyCleared: value }))}
          />
        )
      case 1:
        return (
          <SlugStep
            businessName={formData.businessName}
            tenantSlug={formData.tenantSlug}
            setTenantSlug={(value) => setFormData(prev => ({ ...prev, tenantSlug: value }))}
            slugStatus={slugState.slugStatus}
            generatingSlug={slugState.generatingSlug}
            slugSuggestions={slugState.slugSuggestions}
            setSlugSuggestions={(suggestions) => setSlugState(prev => ({ ...prev, slugSuggestions: suggestions }))}
            showSlugSuggestions={slugState.showSlugSuggestions}
            setShowSlugSuggestions={(show) => setSlugState(prev => ({ ...prev, showSlugSuggestions: show }))}
            loadingSuggestions={slugState.loadingSuggestions}
            setLoadingSuggestions={(loading) => setSlugState(prev => ({ ...prev, loadingSuggestions: loading }))}
            slugAutoGenerated={slugState.slugAutoGenerated}
            setSlugAutoGenerated={(value) => setSlugState(prev => ({ ...prev, slugAutoGenerated: value }))}
            setSlugManuallyCleared={(value) => setSlugState(prev => ({ ...prev, slugManuallyCleared: value }))}
            onSlugChange={handleSlugChange}
          />
        )
      case 2:
        return (
          <TermsStep
            businessName={formData.businessName}
            tenantSlug={formData.tenantSlug}
            email={formData.email}
            selectedPlan={selectedPlan}
            acceptTerms={acceptTerms}
            setAcceptTerms={setAcceptTerms}
            termsTouched={validation.termsTouched}
            setTermsTouched={(value) => setValidation(prev => ({ ...prev, termsTouched: value }))}
          />
        )
      case 3:
        return (
          <PlanSelector
            selectedPlan={selectedPlan}
            onPlanChange={(plan) => {
              setSelectedPlan(plan)
              setFormData(prev => ({ ...prev, plan }))
            }}
            planDetails={planDetails}
          />
        )
      default:
        return null
    }
  }

  const currentStepValid = getStepValidation(currentStepIndex)
  const isLastStep = currentStepIndex === steps.length - 1
  const isSubmitDisabled = !currentStepValid || loading
  const isPlanStep = currentStepIndex === 3

  const submitButtonBaseClass = 'inline-flex items-center gap-2 px-6 py-2.5 text-sm font-semibold rounded-xl border border-transparent transition-all duration-200 focus:outline-none focus-visible:ring-2 focus-visible:ring-brand-400 focus-visible:ring-offset-2 focus-visible:ring-offset-white dark:focus-visible:ring-offset-gray-900 shadow-lg bg-brand-700 text-white dark:bg-brand-700'
  const submitButtonEnabledClass = 'hover:bg-brand-700 dark:hover:bg-brand-700 active:bg-brand-800 dark:active:bg-brand-800 transform hover:-translate-y-0.5 hover:shadow-xl'
  const submitButtonDisabledClass = 'bg-brand-400 dark:bg-brand-500 text-white/80 cursor-not-allowed shadow-none transform-none hover:shadow-none hover:-translate-y-0'
  const submitButtonClassName = `${submitButtonBaseClass} ${isSubmitDisabled ? submitButtonDisabledClass : submitButtonEnabledClass}`

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-950 flex flex-col">
      <nav className="bg-white dark:bg-gray-900 border-b border-gray-200 dark:border-gray-800 px-4 py-3">
        <div className="max-w-7xl mx-auto flex items-center justify-between">
          <Link to="/" className="flex items-center gap-3">
            <Logo size="md" />
          </Link>
          <div className="flex items-center gap-4">
            <ThemeToggle />
            <Link 
              to="/login" 
              className="text-sm text-gray-600 dark:text-gray-400 hover:text-brand-600 dark:hover:text-brand-400"
            >
              ¬øYa tienes cuenta? Inicia sesi√≥n
            </Link>
          </div>
        </div>
      </nav>

      <main className="flex-1 flex items-center justify-center p-4">
        <div className={`w-full ${isPlanStep ? 'max-w-4xl' : 'max-w-md'}`}>
          <form onSubmit={handleSubmit} className="bg-white dark:bg-gray-900 rounded-2xl border border-gray-200 dark:border-gray-800 p-8 shadow-sm">
            {/* Indicador de progreso */}
            <div className="mb-8">
              <div className="flex items-center justify-between mb-2">
                <span className="text-sm font-medium text-gray-900 dark:text-white">
                  Paso {currentStepIndex + 1} de {steps.length}
                </span>
                <span className="text-sm text-gray-500 dark:text-gray-400">
                  {steps[currentStepIndex]}
                </span>
              </div>
              <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                <div
                  className="bg-brand-500 h-2 rounded-full transition-all duration-300"
                  style={{ width: `${((currentStepIndex + 1) / steps.length) * 100}%` }}
                ></div>
              </div>
            </div>

            {/* Contenido del paso actual */}
            <div className="mb-8">
              {renderCurrentStep()}
            </div>

            {/* Navegaci√≥n */}
            <div className="flex items-center justify-between pt-2">
              <button
                type="button"
                onClick={prevStep}
                disabled={currentStepIndex === 0}
                className="inline-flex items-center gap-2 px-5 py-2.5 text-sm font-semibold text-gray-800 dark:text-gray-200 bg-gray-100 dark:bg-gray-700 border-2 border-gray-200 dark:border-gray-600 rounded-xl hover:bg-gray-200 dark:hover:bg-gray-600 hover:border-gray-300 dark:hover:border-gray-500 transition-all duration-200 disabled:opacity-40 disabled:cursor-not-allowed shadow-sm"
              >
                <ArrowLeft className="h-4 w-4" />
                Anterior
              </button>

              <button
                type="submit"
                disabled={isSubmitDisabled}
                className={submitButtonClassName}
              >
                {loading ? (
                  <RefreshCcw className="h-4 w-4 animate-spin" />
                ) : isLastStep ? (
                  'Crear tienda'
                ) : (
                  <>
                    Continuar
                    <ArrowRight className="h-4 w-4" />
                  </>
                )}
              </button>
            </div>
          </form>
        </div>
      </main>
    </div>
  )
}
