// Primer paso del registro: informaci√≥n b√°sica (negocio, email, contrase√±a)

import React from 'react'
import { CheckCircle, XCircle, Eye, EyeOff } from 'lucide-react'
import { PasswordStrength, EmailStatus } from './types'
import { validateEmail, validateBusinessName } from './validationUtils'

interface BasicInfoStepProps {
  // Estados del formulario
  businessName: string
  setBusinessName: (value: string) => void
  businessNameTouched: boolean
  setBusinessNameTouched: (value: boolean) => void
  
  email: string
  setEmail: (value: string) => void
  emailTouched: boolean
  setEmailTouched: (value: boolean) => void
  emailError: string
  emailStatus: EmailStatus
  
  password: string
  setPassword: (value: string) => void
  showPassword: boolean
  setShowPassword: (value: boolean) => void
  passwordTouched: boolean
  setPasswordTouched: (value: boolean) => void
  passwordStrength: PasswordStrength
  
  // Funciones de validaci√≥n externa
  onEmailBlur: () => void
  onPasswordChange: (password: string) => void
  
  // Estados de slug para regeneraci√≥n autom√°tica
  slugAutoGenerated: boolean
  setSlugManuallyCleared: (value: boolean) => void
}

const BasicInfoStep: React.FC<BasicInfoStepProps> = ({
  businessName,
  setBusinessName,
  businessNameTouched,
  setBusinessNameTouched,
  email,
  setEmail,
  emailTouched,
  setEmailTouched,
  emailError,
  emailStatus,
  password,
  setPassword,
  showPassword,
  setShowPassword,
  passwordTouched,
  setPasswordTouched,
  passwordStrength,
  onEmailBlur,
  onPasswordChange,
  slugAutoGenerated,
  setSlugManuallyCleared
}) => {
  const isBusinessNameValid = validateBusinessName(businessName)
  const isEmailValid = validateEmail(email)

  const getPasswordStrengthColor = (score: number) => {
    if (score <= 1) return 'bg-red-500'
    if (score === 2) return 'bg-yellow-500'
    if (score === 3) return 'bg-blue-500'
    if (score === 4) return 'bg-green-500'
    return 'bg-green-600'
  }

  const getPasswordStrengthTextColor = (score: number) => {
    if (score <= 1) return 'text-red-500 dark:text-red-400'
    if (score === 2) return 'text-yellow-500 dark:text-yellow-400'
    if (score === 3) return 'text-blue-500 dark:text-blue-400'
    if (score === 4) return 'text-green-500 dark:text-green-400'
    return 'text-green-600 dark:text-green-500'
  }

  return (
    <div className="space-y-6">
      {/* Informaci√≥n del negocio */}
      <div className="space-y-2">
        <label className="block text-sm font-medium text-gray-800 dark:text-gray-200 mb-1">
          ¬øC√≥mo llamaremos tu negocio?
        </label>
        <div className="relative">
          <input
            name="businessName"
            type="text"
            required
            minLength={4}
            value={businessName}
            onChange={(event) => {
              setBusinessName(event.target.value)
              // Si el slug fue auto-generado, permitir que se regenere con el nuevo nombre
              if (slugAutoGenerated) {
                setSlugManuallyCleared(false)
              }
            }}
            onBlur={() => setBusinessNameTouched(true)}
            className={`w-full px-3 py-2 pr-10 border rounded-xl focus:ring-brand-500 focus:border-brand-500 dark:bg-gray-900 dark:text-gray-100 ${
              businessNameTouched && !isBusinessNameValid
                ? 'border-red-500 focus:border-red-500 focus:ring-red-500'
                : 'border-gray-300 dark:border-gray-700'
            }`}
            placeholder="Ferreter√≠a El Martillo"
          />
          {businessNameTouched && businessName && (
            <span className="absolute inset-y-0 right-3 flex items-center pointer-events-none">
              {isBusinessNameValid ? (
                <CheckCircle className="h-5 w-5 text-emerald-500" />
              ) : (
                <XCircle className="h-5 w-5 text-red-500" />
              )}
            </span>
          )}
        </div>
        {businessNameTouched && !isBusinessNameValid && (
          <p className="text-sm text-red-500 dark:text-red-400">
            El nombre del negocio debe tener al menos 4 caracteres.
          </p>
        )}
        <p className="text-xs text-gray-500 dark:text-gray-400 mt-1 flex items-center gap-1">
          <span>üí°</span>
          Podr√°s cambiar este nombre m√°s adelante en configuraci√≥n si lo deseas.
        </p>
      </div>

      {/* Email */}
      <div className="space-y-2">
        <label className="block text-sm font-medium text-gray-800 dark:text-gray-200 mb-1">
          Email
        </label>
        <div className="relative">
          <input
            name="email"
            type="email"
            required
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            onBlur={() => {
              setEmailTouched(true)
              onEmailBlur()
            }}
            className={`w-full px-3 py-2 pr-10 border rounded-xl focus:ring-brand-500 focus:border-brand-500 dark:bg-gray-900 dark:text-gray-100 ${
              emailTouched && (!isEmailValid || emailError)
                ? 'border-red-500 focus:border-red-500 focus:ring-red-500'
                : emailStatus === 'available'
                ? 'border-emerald-500 focus:border-emerald-500 focus:ring-emerald-500'
                : 'border-gray-300 dark:border-gray-700'
            }`}
            placeholder="tu@email.com"
          />
          {emailTouched && email && (
            <span className="absolute inset-y-0 right-3 flex items-center pointer-events-none">
              {emailStatus === 'checking' ? (
                <div className="animate-spin h-5 w-5 border-2 border-brand-500 border-t-transparent rounded-full"></div>
              ) : emailStatus === 'available' ? (
                <CheckCircle className="h-5 w-5 text-emerald-500" />
              ) : emailError ? (
                <XCircle className="h-5 w-5 text-red-500" />
              ) : null}
            </span>
          )}
        </div>
        {emailTouched && emailError && (
          <p className="text-sm text-red-500 dark:text-red-400">{emailError}</p>
        )}
        {emailStatus === 'available' && !emailError && (
          <p className="text-sm text-emerald-500 dark:text-emerald-400">
            ‚úÖ Email disponible
          </p>
        )}
      </div>

      {/* Contrase√±a */}
      <div className="space-y-2">
        <label className="block text-sm font-medium text-gray-800 dark:text-gray-200 mb-1">
          Contrase√±a
        </label>
        <div className="relative">
          <input
            name="password"
            type={showPassword ? 'text' : 'password'}
            required
            value={password}
            onChange={(e) => {
              setPassword(e.target.value)
              onPasswordChange(e.target.value)
            }}
            onBlur={() => setPasswordTouched(true)}
            className="w-full px-3 py-2 pr-10 border border-gray-300 dark:border-gray-700 rounded-xl focus:ring-brand-500 focus:border-brand-500 dark:bg-gray-900 dark:text-gray-100"
            placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
          />
          <button
            type="button"
            onClick={() => setShowPassword(!showPassword)}
            className="absolute inset-y-0 right-3 flex items-center text-gray-400 hover:text-gray-600 dark:hover:text-gray-300"
          >
            {showPassword ? (
              <EyeOff className="h-5 w-5" />
            ) : (
              <Eye className="h-5 w-5" />
            )}
          </button>
        </div>

        {passwordTouched && password && (
          <div className="space-y-2">
            <div className="flex justify-between text-xs">
              <span className={getPasswordStrengthTextColor(passwordStrength.score)}>
                {passwordStrength.label}
              </span>
              <span className="text-gray-500 dark:text-gray-400">
                {passwordStrength.score}/5
              </span>
            </div>
            <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-2">
              <div
                className={`h-2 rounded-full transition-all duration-300 ${getPasswordStrengthColor(passwordStrength.score)}`}
                style={{ width: `${(passwordStrength.score / 5) * 100}%` }}
              ></div>
            </div>
          </div>
        )}
        
        <div className="text-xs text-gray-500 dark:text-gray-400 space-y-1">
          <p>Tu contrase√±a debe tener al menos 8 caracteres e incluir:</p>
          <ul className="list-disc list-inside space-y-0.5 ml-2">
            <li>Una letra min√∫scula</li>
            <li>Una letra may√∫scula</li>
            <li>Un n√∫mero</li>
            <li>Un car√°cter especial</li>
          </ul>
        </div>
      </div>
    </div>
  )
}

export default BasicInfoStep
