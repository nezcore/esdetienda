// Primer paso del registro: informaci√≥n b√°sica (negocio, email, contrase√±a)

import React, { useState } from 'react'
import { CheckCircle, XCircle, Eye, EyeOff, RefreshCcw, Copy, Check } from 'lucide-react'
import { PasswordStrength, EmailStatus } from './types'
import { validateEmail, validateBusinessName, generateSecurePassword } from './validationUtils'

interface BasicInfoStepProps {
  // Estados del formulario
  businessName: string
  setBusinessName: (value: string) => void
  businessNameTouched: boolean
  setBusinessNameTouched: (value: boolean) => void
  
  email: string
  setEmail: (value: string) => void
  emailTouched: boolean
  setEmailTouched: (value: boolean) => void
  emailError: string
  emailStatus: EmailStatus
  
  password: string
  setPassword: (value: string) => void
  showPassword: boolean
  setShowPassword: (value: boolean) => void
  passwordTouched: boolean
  setPasswordTouched: (value: boolean) => void
  passwordStrength: PasswordStrength
  
  // Funciones de validaci√≥n externa
  onEmailBlur: () => void
  onPasswordChange: (password: string) => void
  
  // Estados de slug para regeneraci√≥n autom√°tica
  slugAutoGenerated: boolean
  setSlugManuallyCleared: (value: boolean) => void
}

const BasicInfoStep: React.FC<BasicInfoStepProps> = ({
  businessName,
  setBusinessName,
  businessNameTouched,
  setBusinessNameTouched,
  email,
  setEmail,
  emailTouched,
  setEmailTouched,
  emailError,
  emailStatus,
  password,
  setPassword,
  showPassword,
  setShowPassword,
  passwordTouched,
  setPasswordTouched,
  passwordStrength,
  onEmailBlur,
  onPasswordChange,
  slugAutoGenerated,
  setSlugManuallyCleared
}) => {
  const isBusinessNameValid = validateBusinessName(businessName)
  const isEmailValid = validateEmail(email)
  
  // Estados para generaci√≥n de contrase√±as
  const [isGenerating, setIsGenerating] = useState(false)
  const [justCopied, setJustCopied] = useState(false)

  // Funci√≥n para generar contrase√±a autom√°ticamente
  const handleGeneratePassword = () => {
    setIsGenerating(true)
    setTimeout(() => {
      const newPassword = generateSecurePassword(14) // 14 caracteres para balance seguridad/usabilidad
      setPassword(newPassword)
      onPasswordChange(newPassword)
      setPasswordTouched(true)
      setIsGenerating(false)
    }, 300) // Peque√±a animaci√≥n para mejor UX
  }

  // Funci√≥n para copiar contrase√±a al portapapeles
  const handleCopyPassword = async () => {
    if (password) {
      try {
        await navigator.clipboard.writeText(password)
        setJustCopied(true)
        setTimeout(() => setJustCopied(false), 2000)
      } catch (error) {
        console.error('Error copiando contrase√±a:', error)
      }
    }
  }

  return (
    <div className="space-y-6 sm:space-y-6">
      {/* Informaci√≥n del negocio */}
      <div className="space-y-2">
        <label className="block text-base sm:text-sm font-medium text-gray-800 dark:text-gray-200 mb-2 sm:mb-1">
          ¬øC√≥mo llamaremos tu negocio?
        </label>
        <div className="relative">
          <input
            name="businessName"
            type="text"
            required
            minLength={4}
            value={businessName}
            onChange={(event) => {
              setBusinessName(event.target.value)
              // Si el slug fue auto-generado, permitir que se regenere con el nuevo nombre
              if (slugAutoGenerated) {
                setSlugManuallyCleared(false)
              }
            }}
            onBlur={() => setBusinessNameTouched(true)}
            className={`w-full px-4 py-3 sm:px-3 sm:py-2 pr-12 sm:pr-10 border rounded-xl focus:ring-brand-500 focus:border-brand-500 dark:bg-gray-900 dark:text-gray-100 text-base sm:text-sm ${
              businessNameTouched && !isBusinessNameValid
                ? 'border-red-500 focus:border-red-500 focus:ring-red-500'
                : 'border-gray-300 dark:border-gray-700'
            }`}
            placeholder="Ferreter√≠a El Martillo"
          />
          {businessNameTouched && businessName && (
            <span className="absolute inset-y-0 right-3 flex items-center pointer-events-none">
              {isBusinessNameValid ? (
                <CheckCircle className="h-5 w-5 text-emerald-500" />
              ) : (
                <XCircle className="h-5 w-5 text-red-500" />
              )}
            </span>
          )}
        </div>
        {businessNameTouched && !isBusinessNameValid && (
          <p className="text-sm text-red-500 dark:text-red-400">
            El nombre del negocio debe tener al menos 4 caracteres.
          </p>
        )}
        <p className="text-xs text-gray-500 dark:text-gray-400 mt-1 flex items-center gap-1">
          <span>üí°</span>
          Podr√°s cambiar este nombre m√°s adelante en configuraci√≥n si lo deseas.
        </p>
      </div>

      {/* Email */}
      <div className="space-y-2">
        <label className="block text-base sm:text-sm font-medium text-gray-800 dark:text-gray-200 mb-2 sm:mb-1">
          Email
        </label>
        <div className="relative">
          <input
            name="email"
            type="email"
            required
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            onBlur={() => {
              setEmailTouched(true)
              onEmailBlur()
            }}
            className={`w-full px-4 py-3 sm:px-3 sm:py-2 pr-12 sm:pr-10 border rounded-xl focus:ring-brand-500 focus:border-brand-500 dark:bg-gray-900 dark:text-gray-100 text-base sm:text-sm ${
              emailTouched && (!isEmailValid || emailError)
                ? 'border-red-500 focus:border-red-500 focus:ring-red-500'
                : emailStatus === 'available'
                ? 'border-emerald-500 focus:border-emerald-500 focus:ring-emerald-500'
                : 'border-gray-300 dark:border-gray-700'
            }`}
            placeholder="tu@email.com"
          />
          {emailTouched && email && (
            <span className="absolute inset-y-0 right-3 flex items-center pointer-events-none">
              {emailStatus === 'checking' ? (
                <div className="animate-spin h-5 w-5 border-2 border-brand-500 border-t-transparent rounded-full"></div>
              ) : emailStatus === 'available' ? (
                <CheckCircle className="h-5 w-5 text-emerald-500" />
              ) : emailError ? (
                <XCircle className="h-5 w-5 text-red-500" />
              ) : null}
            </span>
          )}
        </div>
        {emailTouched && emailError && (
          <p className="text-sm text-red-500 dark:text-red-400">{emailError}</p>
        )}
        {emailStatus === 'available' && !emailError && (
          <p className="text-sm text-emerald-500 dark:text-emerald-400">
            ‚úÖ Email disponible
          </p>
        )}
      </div>

      {/* Contrase√±a */}
      <div className="space-y-3">
        <div className="flex items-center justify-between">
          <label className="block text-base sm:text-sm font-medium text-gray-800 dark:text-gray-200">
            Contrase√±a
          </label>
          <div className="flex items-center gap-2">
            {password && (
              <button
                type="button"
                onClick={handleCopyPassword}
                className="inline-flex items-center gap-1 text-xs text-brand-600 dark:text-brand-400 hover:text-brand-700 dark:hover:text-brand-300 transition-colors"
                title="Copiar contrase√±a"
              >
                {justCopied ? (
                  <>
                    <Check className="h-3 w-3" />
                    Copiado
                  </>
                ) : (
                  <>
                    <Copy className="h-3 w-3" />
                    Copiar
                  </>
                )}
              </button>
            )}
            <button
              type="button"
              onClick={handleGeneratePassword}
              disabled={isGenerating}
              className="inline-flex items-center gap-1 px-2 py-1 text-xs font-medium text-brand-600 dark:text-brand-400 hover:text-brand-700 dark:hover:text-brand-300 border border-brand-200 dark:border-brand-700 rounded-lg hover:bg-brand-50 dark:hover:bg-brand-900/20 transition-all disabled:opacity-50"
            >
              {isGenerating ? (
                <RefreshCcw className="h-3 w-3 animate-spin" />
              ) : (
                <RefreshCcw className="h-3 w-3" />
              )}
              Generar
            </button>
          </div>
        </div>
        
        <div className="relative">
          <input
            name="password"
            type={showPassword ? 'text' : 'password'}
            required
            value={password}
            onChange={(e) => {
              setPassword(e.target.value)
              onPasswordChange(e.target.value)
            }}
            onBlur={() => setPasswordTouched(true)}
            className="w-full px-4 py-3 sm:px-3 sm:py-2 pr-12 sm:pr-10 border border-gray-300 dark:border-gray-700 rounded-xl focus:ring-brand-500 focus:border-brand-500 dark:bg-gray-900 dark:text-gray-100 font-mono text-base sm:text-sm"
            placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
          />
          <button
            type="button"
            onClick={() => setShowPassword(!showPassword)}
            className="absolute inset-y-0 right-3 flex items-center text-gray-400 hover:text-gray-600 dark:hover:text-gray-300 transition-colors"
          >
            {showPassword ? (
              <EyeOff className="h-5 w-5" />
            ) : (
              <Eye className="h-5 w-5" />
            )}
          </button>
        </div>

        {/* Barra de fortaleza mejorada */}
        {passwordTouched && password && (
          <div className="space-y-3">
            <div className="flex items-center justify-between text-sm">
              <span className={`font-medium ${passwordStrength.textColor}`}>
                {passwordStrength.label}
              </span>
              <span className="text-gray-500 dark:text-gray-400 text-xs">
                {passwordStrength.score}/7
              </span>
            </div>
            
            <div className="w-full bg-gray-200 dark:bg-gray-700 rounded-full h-3 overflow-hidden">
              <div
                className={`h-full rounded-full transition-all duration-500 ease-out ${passwordStrength.color}`}
                style={{ width: `${passwordStrength.percentage}%` }}
              ></div>
            </div>
            
            {/* Sugerencias de mejora */}
            {passwordStrength.suggestions.length > 0 && (
              <div className={`p-3 rounded-xl border ${passwordStrength.bgColor} border-gray-200 dark:border-gray-700`}>
                <p className="text-xs font-medium text-gray-700 dark:text-gray-300 mb-2">
                  üí° Para mejorar tu contrase√±a:
                </p>
                <ul className="space-y-1">
                  {passwordStrength.suggestions.slice(0, 3).map((suggestion, index) => (
                    <li key={index} className="text-xs text-gray-600 dark:text-gray-400 flex items-center gap-1">
                      <span className="w-1 h-1 bg-gray-400 rounded-full flex-shrink-0"></span>
                      {suggestion}
                    </li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        )}
        
        {/* Informaci√≥n sobre contrase√±as seguras */}
        {!passwordTouched && (
          <div className="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-xl p-3">
            <p className="text-xs font-medium text-blue-800 dark:text-blue-200 mb-2">
              üîí Contrase√±a segura
            </p>
            <ul className="text-xs text-blue-700 dark:text-blue-300 space-y-1">
              <li>‚Ä¢ Al menos 8 caracteres (recomendado: 12+)</li>
              <li>‚Ä¢ Combina letras, n√∫meros y s√≠mbolos</li>
              <li>‚Ä¢ Evita palabras comunes o datos personales</li>
              <li>‚Ä¢ Usa nuestro generador para m√°xima seguridad</li>
            </ul>
          </div>
        )}
      </div>
    </div>
  )
}

export default BasicInfoStep
